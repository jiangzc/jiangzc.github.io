<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JZC Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 25 Apr 2019 12:25:39 +0000</pubDate>
    <lastBuildDate>Thu, 25 Apr 2019 12:25:39 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Github博客搭建指南（JEKYLL框架）</title>
        <description>&lt;h1 id=&quot;github博客搭建指南jekyll框架&quot;&gt;Github博客搭建指南（JEKYLL框架）&lt;/h1&gt;

&lt;p&gt;这篇文章将介绍如何用JEKYLL框架搭建github博客。国内关于jekyll的文章比较少，大多数都是基于hexo搭建博客的。然而github官方推荐jekyll，所以我就用它了。折腾几天，终于学会了，这里面坑有点多，页面美化也有点麻烦。下面详细的介绍下搭建的步骤和过程。&lt;/p&gt;

&lt;p&gt;自从github Page功能推出以来， 很多人都在github上搭建博客。确实，github Page的优点非常多，比如无限流量、免费服务器、一键上传部署等等。
github Pages可以被认为是用户编写的、托管在github上的静态网页，我们可以把团队、项目、个人网页上传到github，别人访问非常方便。&lt;/p&gt;

&lt;p&gt;前提条件&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;有github账号&lt;/li&gt;
  &lt;li&gt;会 Git 和 Linux&lt;/li&gt;
  &lt;li&gt;会 docker (JEKYLL依赖项有点多，所以推荐用docker)&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;github Page 介绍 https://pages.github.com/&lt;br /&gt;
JEKYLL 介绍 https://jekyllrb.com/&lt;br /&gt;
jekyll镜像地址 https://github.com/envygeeks/jekyll-docker/blob/master/README.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;开始&quot;&gt;开始&lt;/h1&gt;
&lt;p&gt;注意，下面都是在Linux环境中操作的&lt;/p&gt;
&lt;h2 id=&quot;创建仓库&quot;&gt;创建仓库&lt;/h2&gt;
&lt;p&gt;这一步参考 https://pages.github.com/  ，创建含有hello world的index.html。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在github上创建一个仓库，名称是“你的Github账号名.github.io”&lt;/li&gt;
  &lt;li&gt;编辑内容，仓库上传之后，网页也会随之更新，最后看到hello页面&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;安装jekyll&quot;&gt;安装jekyll&lt;/h2&gt;
&lt;p&gt;现在的页面太简单了，没有帖子、没有图片，距离博客还差得远。我们要使用jekyll框架来生成静态网页，提供丰富多样的页面效果。&lt;/p&gt;

&lt;p&gt;jekyll是一个基于ruby开发的，专用于构建静态网站的程序。它能够将一些动态的组件：模板、liquid代码等构建成静态的页面集合，Github-Page全面引入jekyll作为其构建引擎，这也是学习jekyll的主要动力。同时，除了jekyll引擎本身，它还提供一整套功能，比如web server。我们用jekyll –server启动本地调试就是此项功能。读者可能已经发现，在启动server后，之前我们的项目目录下会多出一个_site目录。jekyll默认将转化的静态页面保存在_site目录下，并以某种方式组织。使用jekyll构建博客是十分适合的，因为其内建的对象就是专门为blog而生的，在后面的逐步介绍中读者会体会到这一点。但是需要强调的是，jekyll并不是博客软件，跟workpress之类的完全两码事，它仅仅是个一次性的模板解析引擎，它不能像动态服务端脚本那样处理请求。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;摘录 https://www.ezlippi.com/blog/2015/03/github-pages-blog.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为安装jekyll比较麻烦，所以我用docker创建一个jekyll容器，但还需要在容器内部安装一些插件。&lt;/p&gt;

&lt;p&gt;进入博客仓库 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/jiangzc.github.io&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;创建jekyll容器&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# 进入了吗&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;                  
/home/jzc/Programs/jiangzc.github.io

&lt;span class=&quot;c&quot;&gt;# 容器名为jekyll&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 当前目录映射到容器内部的/srv/jekyll&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 端口映射4000:4000, 进入bash&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; jekyll &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/srv/jekyll&quot;&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:4000	 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/builder:3.8  bash
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;替换gem源
gem install 速度非常慢，有时会卡，所以要用清华大学的镜像&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;参考 https://mirror.tuna.tsinghua.edu.cn/help/rubygems/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# In container&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 添加 TUNA 源并移除默认源&lt;/span&gt;
gem sources &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; https://mirrors.tuna.tsinghua.edu.cn/rubygems/ &lt;span class=&quot;nt&quot;&gt;--remove&lt;/span&gt; https://rubygems.org/
&lt;span class=&quot;c&quot;&gt;# 列出已有源&lt;/span&gt;
gem sources &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 应该只有 TUNA 一个&lt;/span&gt;

bash bundle config mirror.https://rubygems.org https://mirrors.tuna.tsinghua.edu.cn/rubygems
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;容器内部，安装可能用到的插件&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;bundle update &lt;span class=&quot;c&quot;&gt;# 很慢，估计等5分钟....&lt;/span&gt;
gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;redcarpet &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pygments.rb
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来测试 jekyll&lt;br /&gt;
按照&lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;官网&lt;/a&gt;的QuickStart部分，从第三步&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new myblog&lt;/code&gt;开始做，查看页面效果&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果遇到依赖项错误，根据提示安装 Run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; to install missing gems.&lt;br /&gt;
如果执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; 有问题
就执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve &lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/blog_pics/pic1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;成功，接下来&lt;del&gt;阅读官方文档，从头开始，闭门造车&lt;/del&gt;，当然是使用别人配置好的模板适当修改，我们就能做出自己的博客啦。  &lt;br /&gt;
在网上随便找了一些：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/20223939&quot;&gt;有哪些简洁明快的 Jekyll 模板？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll Themes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chairyfish.com/BeautifulJekyllTheme/&quot;&gt;BeautifulJekyllTheme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;下载模板&quot;&gt;下载模板&lt;/h2&gt;
&lt;p&gt;接下来以 &lt;a href=&quot;https://taylantatli.github.io/Moon/&quot;&gt;Moon主题&lt;/a&gt; 为例，说明配置方法&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;项目地址 https://github.com/TaylanTatli/Moon &lt;br /&gt;
DEMO  https://taylantatli.github.io/Moon/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;删除刚才测试的myblog文件夹，回到jiangzc.github.io目录 &lt;br /&gt;
下载Moon的zip压缩包，解压到你的博客文件夹,目录树像这样&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# jzc @ Precision in ~ [14:06:15] &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree &lt;span class=&quot;nt&quot;&gt;-dL&lt;/span&gt; 1 jiangzc.github.io
jiangzc.github.io
├── about
├── assets
├── _data
├── _includes
├── _layouts
├── myblog
├── posts
├── _posts
├── projects
├── _sass
├── _site
└── tags
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在容器里，输入&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;， 可能要解决依赖项问题 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install ...&lt;/code&gt;&lt;br /&gt;
浏览器访问http://localhost:4000 ， 效果如下
&lt;img src=&quot;/img/in-post/blog_pics/pic2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后续配置参考 https://taylantatli.github.io/Moon/moon-theme/&lt;br /&gt;
完成后用&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;重新生成页面，本地确认后push到github上就可以了。&lt;/p&gt;

&lt;h2 id=&quot;常用命令参考&quot;&gt;常用命令参考&lt;/h2&gt;
&lt;p&gt;停止容器 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker container stop jekyll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启容器、构建网站&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker container start jekyll &amp;amp;&amp;amp; docker exec -it  jekyll jekyll build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启容器、构建网站、启动Web服务&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker container start jekyll &amp;amp;&amp;amp; docker exec -it  jekyll jekyll serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启容器、构建网站、git add and commit、启动Web服务&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./jiangzc.github.io

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container start jekyll &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt;  jekyll jekyll build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'new file'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt;  jekyll jekyll serve

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ezlippi.com/blog/2015/03/github-pages-blog.html&quot;&gt;利用github-pages建立个人博客&lt;/a&gt;  非常好&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io/wiki/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B&quot;&gt;博客搭建详细教程&lt;/a&gt;
 很详细，但没有使用jekyll框架，它是基于成品修改的，不够个性化&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot;&gt;阮一峰的网络日志&lt;/a&gt; 推荐看一下&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2019/04/22/blog/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/22/blog/</guid>
        
        <category>github</category>
        
        <category>博客</category>
        
        
      </item>
    
      <item>
        <title>Web介绍</title>
        <description>&lt;p&gt;目录：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Web资源 — URI URL URN 资源传输&lt;/li&gt;
  &lt;li&gt;API — 原因 应用 操作资源&lt;/li&gt;
  &lt;li&gt;网络 因特网 互联网 万维网&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;web资源&quot;&gt;Web资源&lt;/h2&gt;
&lt;p&gt;早期 Web资源：在网络中有地址的静态文件&lt;br /&gt;
现在 Web资源：可以被识别、被命名、或被处理的任何实体&lt;br /&gt;
资源的形式多种多样，文档、图片、音乐、电影、数据库、网页、服务都可以算作是资源&lt;br /&gt;
互联网上这么多资源，怎么区分，怎么找到我想要的资源呢？这就需要用到URI(统一资源标志符)&lt;/p&gt;

&lt;h3 id=&quot;uri-统一资源标志符&quot;&gt;URI 统一资源标志符&lt;/h3&gt;
&lt;p&gt;URI是一个用于标识某一互联网资源名称的字符串。每个资源的URI是独一无二的，这样才能把它们区分开。&lt;br /&gt;
例如：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;http://www.w3school.com.cn/tags/index.asp 代表W3school网站上的一份参考手册&lt;/li&gt;
  &lt;li&gt;sftp://67.216.199.87:26894/ 代表我VPS上的ssh服务&lt;/li&gt;
  &lt;li&gt;thunder://QUFlZDJrOi8vfGZpbGV8JTVCJUU4JUJGJTg1JUU5rOi8vfGZpb…… 代表迅雷服务器上的一部电影&lt;/li&gt;
  &lt;li&gt;magnet:?xt=urn:btih:AC55FAEAE28DD449F19130961DA3646E7ABA324D 磁力链接，代表一个资源&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;url-urn-与-uri&quot;&gt;URL URN 与 URI&lt;/h3&gt;
&lt;p&gt;URL是统一资源定位符，对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。&lt;/p&gt;

&lt;p&gt;URN是统一资源名称。可以表示唯一的资源，但是不能给出实体的位置。系统可以先在本地寻找一个实体，在它试着在Web上找到该实体之前。它也允许Web位置改变，然而这个实体却还是能够被找到。&lt;/p&gt;

&lt;p&gt;URI包括URL和URN。上面例子中的(1)(2)是URL，因为其中有路径可以确定资源的位置，这样才能找到它。上面例子中的(3)(4)是URN，因为它带有文件的特征码，表示了文件独一无二的身份。&lt;/p&gt;

&lt;p&gt;下面引用知乎的回答进一步解释这些概念&lt;br /&gt;
&lt;a href=&quot;https://www.zhihu.com/question/21950864&quot;&gt;HTTP 协议中 URI 和 URL 有什么区别？&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;web资源的传输&quot;&gt;Web资源的传输&lt;/h3&gt;
&lt;p&gt;在了解Web资源的概念之后，我们知道了URI可以区分不同的资源，根据URI我们就可以找到指定的资源。但还有一个问题，这些Web资源储存在服务器上，它们是怎么传输到我们的电脑上呢？换句话说，当我们请求一个资源时，真实的物理世界发生了哪些事？我们想知道信息是如何传递的？它经过了哪些线路？&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=ewrBalT_eBM&amp;amp;t=72s&quot;&gt;How Does the Internet Work?&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;api&quot;&gt;API&lt;/h2&gt;
&lt;p&gt;API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。API本身是抽象的，它仅定义了一个接口，而不涉及应用程序在实际实现过程中的具体操作。&lt;br /&gt;
从形式的角度看：&lt;br /&gt;
API像函数声明一样，指定了参数和返回结果，负责一个程序和其他软件的沟通，本质是预先定义的函数。&lt;br /&gt;
从设计的角度看：&lt;br /&gt;
把某些功能封装好，方便其他人调用。调用的人可以很方便使用这些功能，并且可以不需要知道这些功能的具体实现过程。&lt;/p&gt;

&lt;h3 id=&quot;为什么使用api&quot;&gt;为什么使用API&lt;/h3&gt;
&lt;p&gt;程序之间是互相联系的，它们彼此依赖，需要协调配合等才能完成任务。API的目的就是把这种通讯方式事先约定好，当请求方调用API时，接收方负责实现具体过程。这么一来，请求方只需调用API，不用知道具体操作就能完成任务。&lt;/p&gt;

&lt;h3 id=&quot;api的应用&quot;&gt;API的应用&lt;/h3&gt;
&lt;p&gt;下面看一些具体的应用情景&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;操作系统API&lt;br /&gt;
比如你想做一个单机游戏的修改器，修改玩家的生命值。尽管你知道游戏中生命值对应的内存地址，但是修改器和游戏是两个不同的进程，你不能直接修改这个内存。怎么办？我们知道操作系统可以管理计算机硬件与软件资源，它是有权限修改内存的。所以就我们请求操作系统修改内存，这就需要调用操作系统的API。&lt;br /&gt;
操作系统留给应用程序的一个调用接口，应用程序通过调用操作系统的API而使操作系统去执行应用程序的命令。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多媒体API&lt;br /&gt;
DirectX是由微软公司创建的多媒体编程接口。由C++编程语言实现，遵循COM。被广泛使用于Microsoft Windows、Microsoft XBOX、Microsoft XBOX 360和Microsoft XBOX ONE电子游戏开发，并且只能支持这些平台。最新版本为DirectX 12，创建在最新的Windows10。&lt;br /&gt;
DirectX API 帮助游戏开发者设计炫酷的画面，而不必在意显卡是如何工作的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web API&lt;br /&gt;
什么是Web API呢？&lt;br /&gt;
如果我们想要获取一篇Blog，输入http://localhost:9000/blog/123 ，就可以看到id为123的Blog页面，但这个结果是HTML页面，它同时混合包含了Blog的数据和Blog的展示两个部分。对于用户来说，阅读起来没有问题，但是，如果机器读取，就很难从HTML中解析出Blog的数据。&lt;br /&gt;
如果一个URL返回的不是HTML，而是机器能直接解析的数据，这个URL就可以看成是一个Web API。比如，读取http://localhost:9000/api/blogs/123 ，如果能直接返回Blog的数据，那么机器就可以直接读取。&lt;br /&gt;
REST就是一种设计API的模式。最常用的数据格式是JSON。由于JSON能直接被JavaScript读取，所以，以JSON格式编写的REST风格的API具有简单、易读、易用的特点。 &lt;br /&gt;
编写API有什么好处呢？&lt;br /&gt;
由于API就是把Web App的功能全部封装了，所以，通过API操作数据，可以极大地把前端和后端的代码隔离，使得后端代码易于测试，前端代码编写更简单。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;web中的api与资源&quot;&gt;Web中的API与资源&lt;/h3&gt;
&lt;p&gt;服务器上储存了很多各种各样的资源，其中一部分是对外开放的。如果用户随意的读取、修改、删除资源，这就很危险了。所以，对于外部的请求，我们总是使用API来操作服务器上的数据。使用API好处很多，第一：对请求做出了限制，保证了服务器数据的安全。第二：制定了一套规范，便于开发。&lt;br /&gt;
下面举一些例子来说明API是如何操作资源的。&lt;/p&gt;

&lt;p&gt;V2EX是一个知名技术创意网站，由设计师、程序员及有创意的人参与的社区。它基于兴趣将用户创建的内容组织分类成不同“节点”，网站以内容的活跃程度决定在首页排序的位置。&lt;br /&gt;
我们来看看这个网站的API &lt;a href=&quot;https://github.com/djyde/V2EX-API&quot;&gt;V2EX API&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;实验：用POSTMAN发出API请求，测试结果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;推荐视频 &lt;a href=&quot;https://www.youtube.com/watch?v=s7wmiS2mSXY&quot;&gt;What is an API&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;关于网络补充&quot;&gt;关于网络（补充）&lt;/h2&gt;
&lt;p&gt;上面谈到的大部分内容都和Web有关。那么，Web到底是什么？  为了弄清楚这个问题，我们先要搞懂下面这些关键词。&lt;br /&gt;
关键词：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;互联网(internet;internetwork;internection network)&lt;/li&gt;
  &lt;li&gt;因特网(Internet)&lt;/li&gt;
  &lt;li&gt;万维网(WWW;world wide web;Web)&lt;/li&gt;
  &lt;li&gt;HTTP(HyperText Transfer Protocol)&lt;/li&gt;
  &lt;li&gt;HTML(HyperText Markup Language)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;网络：由若干结点和连接这些结点的链路组成。&lt;br /&gt;
互联网：是网络的网络，是所有类型网络的母集。&lt;br /&gt;
因特网：世界上最大的互联网网络。即 因特网概念从属于互联网概念。习惯上，大家把连接在因特网上的计算机都称为主机。&lt;br /&gt;
万维网：万维网是一个大规模的、联机式的信息贮藏所，英文简称web。 特点是基于HTTP、HTML技术。简单理解是与“浏览网页”相关的网络系统。&lt;/p&gt;

&lt;p&gt;Web（World Wide Web）即全球广域网，也称为万维网，它是一种基于超文本和HTTP的、全球性的、动态交互的、跨平台的分布式图形信息系统。是建立在Internet上的一种网络服务，为浏览者在Internet上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超级链接将Internet上的信息节点组织成一个互为关联的网状结构。&lt;br /&gt;
万维网用链接的方法能非常方便地从因特网上的一个站点访问另一个站点（超链技术），具有提供分布式服务的特点。万维网是一个分布式的超媒体系统，是超文本系统的扩充。万维网基于B/S架构工作。   &lt;br /&gt;
&lt;a href=&quot;https://baike.baidu.com/item/Web/150564#2&quot;&gt;Web 万维网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTTP：为解决“用什么样的协议来实现整个因特网上的万维网文档”这一难题，就要使万维网客户程序（以浏览器为主，但不限于浏览器）与万维网服务器程序之间的交互遵守严格的协议，这就是超文本传送协议（HyperText Transfer Protocol）。HTTP是处于应用层的协议，使用TCP传输层协议进行可靠的传送。因此，需要特别提醒的是，万维网是基于因特网的一种广泛因特网应用系统，且万维网采用的是HTTP（端口：80）/HTTPS（端口：43）的传输协议，但因特网还有其他的网络应用系统（如：FTP、SMTP等等）。&lt;/p&gt;

&lt;p&gt;HTML：为了解决“怎样使不同作者创作的不同风格的万维网文档，都能在因特网上的各种主机上显示出来，同时使用户清楚地知道在什么地方存在着链接”这一问题，万维网使用超文本标记语言（HyperText Markup Language），使得万维网页面的设计者可以很方便地用链接从页面的某处链接到因特网的任何一个万维网页面，并且能够在自己的主机品目上将这些页面显示出来。HTML与txt一样，仅仅是是一种文档，不同之处在于，这种文档专供于浏览器上为浏览器用户提供统一的界面呈现的统一规约。且具备结构化的特征，这是txt所不具备的强制规定。&lt;/p&gt;

&lt;h2 id=&quot;部分参考资料&quot;&gt;部分参考资料&lt;/h2&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Web_resource&lt;br /&gt;
https://www.zhihu.com/question/21950864&lt;br /&gt;
https://baike.baidu.com/item/url/110640?fr=aladdin&lt;br /&gt;
https://baike.baidu.com/item/URN&lt;br /&gt;
https://www.zhihu.com/question/38594466&lt;br /&gt;
https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3&lt;br /&gt;
https://www.youtube.com/watch?v=s7wmiS2mSXY&lt;br /&gt;
https://www.zhihu.com/question/19860216&lt;br /&gt;
https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001402402473485d8c205b735ee4e698f90769960fcec4b000&lt;br /&gt;
https://www.zhihu.com/question/58274241&lt;br /&gt;
https://github.com/djyde/V2EX-API&lt;br /&gt;
https://www.douban.com/note/323728072/&lt;br /&gt;
https://baike.baidu.com/item/Web/150564&lt;br /&gt;
https://www.zhihu.com/question/19860216&lt;br /&gt;
https://www.zhihu.com/question/20597473&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2019/01/07/Web%E5%88%86%E4%BA%AB/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/07/Web%E5%88%86%E4%BA%AB/</guid>
        
        <category>Web</category>
        
        
      </item>
    
      <item>
        <title>Ubuntu 18.04 配置指南2</title>
        <description>&lt;h1 id=&quot;ubuntu1804-配置2&quot;&gt;Ubuntu18.04 配置(2)&lt;/h1&gt;

&lt;h2 id=&quot;用户界面配置美化桌面环境&quot;&gt;用户界面配置+美化桌面环境&lt;/h2&gt;
&lt;h3 id=&quot;tweaks-修改界面&quot;&gt;Tweaks 修改界面&lt;/h3&gt;
&lt;p&gt;安装 tweak &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install ubuntu-tweak&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;修改字体大小&lt;/li&gt;
  &lt;li&gt;整体缩放&lt;/li&gt;
  &lt;li&gt;桌面图标（家目录、回收站等）&lt;/li&gt;
  &lt;li&gt;主题样式&lt;/li&gt;
  &lt;li&gt;gnome-shell 扩展&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装插件扩展   &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install gnome-shell-extensions&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dash to panel 或 Dash to dock 修改Dock栏样式&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;微软雅黑字体&quot;&gt;微软雅黑字体&lt;/h3&gt;
&lt;p&gt;网上下载 msyh.ttf 安装&lt;br /&gt;
设置浏览器字体为微软雅黑&lt;br /&gt;
终端中文字体解决
https://gist.github.com/lihk11/23fd0c2e3f1bff966269dbeb73aaab13&lt;/p&gt;

&lt;h3 id=&quot;文件浏览器设置总是显示路径&quot;&gt;文件浏览器设置—总是显示路径&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gsettings set org.gnome.nautilus.preferences always-use-location-entry true&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;快捷键失效问题&quot;&gt;快捷键失效问题&lt;/h3&gt;
&lt;p&gt;注销、锁定后再次进入界面  重启gnome  Alt+F2 输入r&lt;/p&gt;

&lt;h3 id=&quot;显示休眠睡眠按钮&quot;&gt;显示休眠、睡眠按钮&lt;/h3&gt;
&lt;p&gt;— 安装 suspend button 插件
https://askubuntu.com/questions/967205/where-is-the-suspend-hibernate-button-in-gnome-shell&lt;/p&gt;

&lt;p&gt;— 安装 Hibernate 插件
http://ubuntuhandbook.org/index.php/2018/05/add-hibernate-option-ubuntu-18-04/&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is the difference between Hibernate and Suspend？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suspend does not turn off your computer. It puts the computer and all peripherals on a low power consumption mode. If the battery runs out or the computer turns off for some reason, the current session and unsaved changes will be lost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hibernate saves the state of your computer to the hard disk and completely powers off. When resuming, the saved state is restored to RAM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;设置浅休眠时 不锁定
&lt;code class=&quot;highlighter-rouge&quot;&gt;gsettings set org.gnome.desktop.screensaver ubuntu-lock-on-suspend false&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;终端大小写不敏感&quot;&gt;终端大小写不敏感&lt;/h2&gt;
&lt;p&gt;编辑~/.inputrc（没有的话，就新建一个），在最后加一行： 
set completion-ignore-case on
保存，重新打开终端就可以了。&lt;/p&gt;

&lt;h2 id=&quot;自定义app&quot;&gt;自定义APP&lt;/h2&gt;
&lt;p&gt;https://askubuntu.com/questions/403766/duplicate-icons-for-manually-created-gnome-launcher-items
https://blog.csdn.net/yanxiangtianji/article/details/81083299&lt;/p&gt;

&lt;h3 id=&quot;其他问题&quot;&gt;其他问题&lt;/h3&gt;
&lt;p&gt;锁定后 重启gnome-shell以恢复自定义快捷键&lt;br /&gt;
https://askubuntu.com/questions/455301/how-to-restart-gnome-shell-after-it-became-unresponsive-freeze/496999
https://askubuntu.com/questions/92218/how-to-execute-a-command-after-resume-from-suspend&lt;/p&gt;

&lt;p&gt;sublime输入中文问题&lt;br /&gt;
https://github.com/lyfeyaj/sublime-text-imfix&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2018/08/01/Ubuntu%E8%A3%85%E6%9C%BA%E6%8C%87%E5%8D%972/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/01/Ubuntu%E8%A3%85%E6%9C%BA%E6%8C%87%E5%8D%972/</guid>
        
        <category>Ubuntu</category>
        
        <category>配置</category>
        
        
      </item>
    
      <item>
        <title>Ubuntu 18.04 配置指南</title>
        <description>&lt;h1 id=&quot;ubuntu-1804-配置指南1&quot;&gt;Ubuntu 18.04 配置指南(1)&lt;/h1&gt;

&lt;p&gt;这几天都在折腾Ubuntu，积累了一些经验，想把它记录下来分享给大家。主要包括我在使用过程中遇到的问题和解决方法，配置系统、桌面环境，还有各种界面美化、插件安装等等。&lt;br /&gt;
本以为 Ubuntu18.04 会修复很多图形界面的BUG和设计失误，然而并没有，用了几天感觉很失望。各种小问题不断出现，极度影响用户体验。（绝大部分都是GUI的问题）&lt;br /&gt;
下面开始进入正题～～  （本文持续更新）&lt;/p&gt;
&lt;h2 id=&quot;安装过程&quot;&gt;安装过程&lt;/h2&gt;
&lt;p&gt;由于显卡驱动等问题，可能无法进入Ubuntu安装界面。&lt;br /&gt;
在Install Ubuntu 界面时  按“e”建进入编辑，修改倒数第二行：&lt;br /&gt;
将&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;quite splash --- &lt;/code&gt;&lt;br /&gt;
改为&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;quite splash nomodeset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;nomodeset的作用&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The newest kernels have moved the video mode setting into the kernel. So all the programming of the hardware specific clock rates and registers on the video card happen in the kernel rather than in the X driver when the X server starts.. This makes it possible to have high resolution nice looking splash (boot) screens and flicker free transitions from boot splash to login screen. Unfortunately, on some cards this doesnt work properly and you end up with a black screen. Adding the nomodeset parameter instructs the kernel to not load video drivers and use BIOS modes instead until X is loaded.&lt;br /&gt;
翻译&lt;br /&gt;
最新的内核已经把视频模式设置嵌入内核中，所以所有显卡硬件程序的指定时钟和寄存器当图形服务器启动时在内核进行而不是图形设备运行，这使得我们在启动时可以看到不闪的和高分辨率的好看的启动界面，但是，在某些视频卡它不能正常工作而现实黑屏，增加nomodeset参数则告诉内核不要加载显卡而用BIOS模式直到图形界面运行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;配置ubuntu系统&quot;&gt;配置Ubuntu系统&lt;/h2&gt;

&lt;h3 id=&quot;添加源&quot;&gt;添加源&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;什么是软件源?&lt;/strong&gt;&lt;br /&gt;
源,在Ubuntu下,它相当于软件库,需要什么软件,只要记得正确的软件名就可以用命令安装&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;软件源的分类&lt;/strong&gt;&lt;br /&gt;
在 Ubuntu 中软件源其实还细分为下面两种：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu 官方软件源&lt;/li&gt;
  &lt;li&gt;PPA 软件源  &lt;br /&gt;
Ubuntu 官方软件源:
Ubuntu 官方软件源中包含了 Ubuntu 系统中所用到的绝大部分的软件，它对应的源列表是 /etc/apt/sources.list。只需要修改这个文件，就能添加我们想要的源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;一定要添加中科大的源！！！&lt;/strong&gt;推荐再加一个国内的源，比如阿里、网易、清华&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;参考资料 https://www.jianshu.com/p/57a91bc0c594&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;sudo-免密码&quot;&gt;sudo 免密码&lt;/h3&gt;
&lt;p&gt;在配置环境时，每次安装软件都要输密码感觉很麻烦，所以暂时取消sudo密码&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo visudo&lt;/code&gt;&lt;br /&gt;
最后一行添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;jzc    ALL=(ALL:ALL)NOPASSWD: ALL&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;双击sh行为设置&quot;&gt;双击*.sh行为设置&lt;/h3&gt;
&lt;p&gt;为了安全，系统默认的方式是：双击*.sh开启编辑模式。但这样很不方便，如果要运行shell脚本，只能在终端里输入命令，右键菜单是找不到运行的。&lt;br /&gt;
解决方法：&lt;br /&gt;
任意文件夹下，菜单中选择Edit-&amp;gt;Preference-&amp;gt;Behavior选项卡，可以看到默认为View executable text files when they are opened。把其选择为Ask each time，之后每次鼠标点击，可以让用户选择以何种方式响应双击事件。&lt;/p&gt;

&lt;h3 id=&quot;grub-设置&quot;&gt;grub 设置&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;解决关机卡死的问题&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo vi /etc/default/grub&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;&lt;/code&gt;   -&amp;gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;  （删除引号中的内容）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改等待时间&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GRUB_TIMEOUT=5&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保存记住上次的启动项&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GRUB_DEFAULT=saved&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GRUB_SAVEDEFAULT=true&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;编辑器的首选项&quot;&gt;编辑器的首选项&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;设置终端的默认编辑器&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;update-alternatives --config editor &lt;/code&gt;&lt;br /&gt;
&lt;strong&gt;gedit 配置&lt;/strong&gt; &lt;br /&gt;
打开gedit，在左上角Activities的右边找到gedit，右键，选择Preference&lt;/p&gt;

&lt;h2 id=&quot;软件设置&quot;&gt;软件设置&lt;/h2&gt;

&lt;h3 id=&quot;安装输入法-input-method&quot;&gt;安装输入法 Input Method&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;安装fcitx&lt;/li&gt;
  &lt;li&gt;设置，Language Support -&amp;gt; Keyboard input method system -&amp;gt; fcitx&lt;/li&gt;
  &lt;li&gt;上网搜索 搜狗输入法 for Linux 下载安装&lt;/li&gt;
  &lt;li&gt;重启&lt;/li&gt;
  &lt;li&gt;gnome右上角Keyboard -&amp;gt; Configure 添加 Sougou&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;科学上网&quot;&gt;科学上网&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;安装Chrome 同时保留 Firefox(很重要！！！！)&lt;/strong&gt;&lt;br /&gt;
在抓包的时候Chrome, Firefox各有优缺点。&lt;/p&gt;

&lt;p&gt;Firefox不能翻墙问题&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Please also try setting network.proxy.socks_remote_dns to true in about:config. You can get a list of SOCKS proxies from samair. You may have to restart Firefox and also Clear Now the Cache and Cookies in Tools (Alt + T) &amp;gt; Clear Recent History.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下载chrome for linux 安装包，离线安装&lt;br /&gt;
pip安装ss 客户端配置格式如下(和服务器保持一致)&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server_ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30696&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rc4-md5&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;启动  sslocal -c /home/usr/ss.json&lt;br /&gt;
添加开机自启&lt;/p&gt;

&lt;p&gt;kcptun 的安装及其配置&lt;br /&gt;
略&lt;/p&gt;

&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装git&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install git&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;配置用户信息
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ubuntu:~$ git config --global user.name &quot;Your Name Here&quot;
ubuntu:~$ git config --global user.email &quot;youremail@address.here&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建秘钥文件&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa -C &quot;你的github账号邮箱&quot;&lt;/code&gt;&lt;br /&gt;
默认密钥文件路径在~/.ssh，id_rsa是私钥文件，id_rsa.pub是公钥文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;将公钥添加到Github&lt;br /&gt;
将id_rsa.pub文件内容全部复制&lt;br /&gt;
登陆到GitHub上，右上角小头像-&amp;gt;Setting-&amp;gt;SSH and GPG keys中，点击new SSH key&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2018/08/01/Ubuntu%E8%A3%85%E6%9C%BA%E6%8C%87%E5%8D%97/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/01/Ubuntu%E8%A3%85%E6%9C%BA%E6%8C%87%E5%8D%97/</guid>
        
        <category>Ubuntu</category>
        
        <category>配置</category>
        
        
      </item>
    
  </channel>
</rss>
